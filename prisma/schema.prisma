generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  passwordHash  String?
  role          Role     @default(CANDIDATE)
  image         String?
  jobs          Job[]    @relation("EmployerJobs")
  applications  Application[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  logoUrl     String?
  description String
  type        JobType
  location    String
  status      JobStatus @default(PENDING)
  employer    User      @relation("EmployerJobs", fields: [employerId], references: [id])
  employerId  String
  salaryMin   Int?
  salaryMax   Int?
  applications Application[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Application {
  id          String   @id @default(cuid())
  resumeUrl   String?
  message     String?
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       String
  candidate   User     @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role { ADMIN EMPLOYER CANDIDATE }
enum JobType { FULL_TIME PART_TIME REMOTE CONTRACT HYBRID }
enum JobStatus { PENDING APPROVED REJECTED }
